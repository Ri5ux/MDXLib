buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            url = "https://oss.sonatype.org/content/groups/public"
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.ajoberstar:gradle-git:0.10.1'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
    }
}

plugins {
  id "com.matthewprenger.cursegradle" version "1.1.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven'

configurations {
    deployerJars
}

dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
}


def version_forge="28.2.16"
def version_mc="1.14.4"
def curseforge_id="248278"
def curseforge_release_type="release"
def curseforge_api_key=project.ext.properties.curseforge_api_key == null ? "00000-00000-00000-00000-00000" : project.ext.properties.curseforge_api_key
def mavenUsername=project.ext.properties.mavenUsername == null ? "user" : project.ext.properties.mavenUsername
def mavenPassword=project.ext.properties.mavenPassword == null ? "none" : project.ext.properties.mavenPassword

version = '1.14.4-1.0'
group = 'com.asx.mdxlib' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mdxlib'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.14.4-28.2.16'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "mdxlib",
            "Specification-Vendor": "asx",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"asx",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

processResources {
	inputs.property 'version', project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'

		expand 'version':project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

curseforge {
        apiKey = curseforge_api_key

        project {
            id = curseforge_id
            changelog = ''
            releaseType = hasProperty('curseforge_release_type') ? curseforge_release_type : 'release'

            mainArtifact jar

            relations {
                requiredLibrary 'mdxlib'
        }
    }
}

task("publishToMaven", dependsOn:"build") {
    description = "Uploads the artifacts generated during the build process to the aliensvspredator maven repository"

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "ftp://127.0.0.1") {
                authentication(userName: mavenUsername, password: mavenPassword)
            }
            
	        pom.project {
	        	properties {
	            	forgeVersion = version_forge
	            	mcVersion = version_mc
	            }
	        }
        }
    }
}